--- a/dbus/dbus.go
+++ b/dbus/dbus.go
@@ -39,7 +39,8 @@ func (value *multiWriterValue) Update(fn
 // Acts as a root to the object tree
 type BusManager struct {
 	*Object
-	conn *dbus.Conn
+	conn  *dbus.Conn
+	state seriatim.Sequent
 }
 
 type mgrState struct {
@@ -72,7 +73,10 @@ func NewBusManager(
 	name string,
 ) (*BusManager, error) {
 	state := &mgrState{sigref: make(map[string]uint64)}
-	handler := &BusManager{Object: NewObject("", state, nil, nil)}
+	handler := &BusManager{
+		Object: NewObject("", nil, nil, nil),
+		state:  seriatim.NewSupervisedSequent(state, nil),
+	}
 	handler.bus = handler
 	conn, err := busfn()
 	if err != nil {
@@ -528,7 +532,7 @@ func (o *Object) getSignals(
 			sequent: o.sequent,
 		}
 		signals[mapped_name] = signal
-		o.bus.sequent.Call("AddMatchSignal", o.bus.conn, dbusIfaceName, mapped_name)
+		o.bus.state.Call("AddMatchSignal", o.bus.conn, dbusIfaceName, mapped_name)
 	}
 	return signals
 }
